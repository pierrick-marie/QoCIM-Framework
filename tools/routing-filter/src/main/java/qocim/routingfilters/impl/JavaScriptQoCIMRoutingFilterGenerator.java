/**
 * This file is part of the QoCIM middleware.
 *
 * Copyright (C) 2014 IRIT, Télécom SudParis
 *
 * The QoCIM software is free software: you can redistribute it and/or modify
 * It under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The QoCIM software platform is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU Lesser General Public License
 * for more details: http://www.gnu.org/licenses
 *
 * Initial developer(s): Pierrick MARIE
 * Contributor(s):
 */
package qocim.routingfilters.impl;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import qocim.datamodel.QoCMetaData;
import qocim.datamodel.utils.ConstraintChecker;
import qocim.datamodel.utils.ConstraintCheckerException;
import qocim.routingfilters.EComparator;
import qocim.routingfilters.IQoCIMRoutingFilterGenerator;

/**
 * This class generates constraints relative to the QoCIM meta-model. The
 * constraints should be used within routing filters. This class have to be used
 * with the classes JavaScriptBeginRoutingFilterGenerator and
 * JavaScriptEndRoutingFilterGenerator.
 *
 * @see JavaScriptBeginRoutingFilterGenerator
 * @see JavaScriptEndRoutingFilterGenerator
 *
 * @author Pierrick MARIE
 */
public class JavaScriptQoCIMRoutingFilterGenerator implements IQoCIMRoutingFilterGenerator {

	// # # # # # PRIVATE VARIABLES # # # # #

	/**
	 * The buffer that contains the QoCIM-based constraints.
	 */
	private final StringBuffer stringBufferConstraints;

	// # # # # # CONSTRUCTORS # # # # #

	public JavaScriptQoCIMRoutingFilterGenerator() {
		// - - - - - INITIALIZE THE VARIABLES - - - - -
		stringBufferConstraints = new StringBuffer();
	}

	// # # # # # PUBLIC METHODS # # # # #

	/**
	 * This method adds QoC-criterion constraints into a QoCIM-based routing
	 * filters. A QoC-criterion constraint expresses requirements onto the
	 * following attributes:
	 * <ul>
	 * <li>qocim.QoCIndicator.id</li>
	 * <li>qocim.QoCCriterion.id</li>
	 * <li>qocim.QoCMetricDefinition.id</li>
	 * </ul>
	 * The constraints are XPath regular expressions stored into the variable
	 * stringBufferConstraints.
	 *
	 * Example of QoC-criterion constraints produced by the method: <emph> if(
	 * (xpath.evaluate("//qocindicator[@id='10' and
	 * qoccriterion[@id='[10.1][10.2]']/qocmetricdefinition[@id='10.1']]", doc,
	 * XPathConstants.NODESET).length == 0) &&
	 * (xpath.evaluate("//qocindicator[@id='10' and
	 * qoccriterion[@id='[10.1][10.2]']/qocmetricdefinition[@id='10.2']]", doc,
	 * XPathConstants.NODESET).length == 0)) { return false; } </emph>
	 *
	 * In this example two constraints have been handled, both require
	 * qocim.QoCIndicator.id = 10 and qocim.QoCCriterion.id = [10.1][10.2]. The
	 * first one also requires qocim.QoCMetricDefinition.id = 10.1 and the
	 * second one requires qocim.QoCMetricDefinition.id = 10.2.
	 *
	 * @param _qoCCriterionConstraints
	 *            The list of QoCMetaData transformed into constraints and added
	 *            into the routing filter. All the constraints are gather within
	 *            one if and separated with the AND logical operator.
	 *            <b>Warning</b>: the if statement generated by the method
	 *            globally acts as an OR operator between all constraints.
	 *            Indeed, the if statement returns false if any QoC metadata
	 *            respects all the constraints.
	 *
	 *
	 * @see qocim.QoCIndicator
	 * @see qocim.QoCCriterion
	 * @see qocim.QoCMetricDefinition
	 */
	@Override
	public void addQoCCriterionConstraints(final List<QoCMetaData> _qoCCriterionConstraints) {
		// - - - - - CHECK THE VALUE OF THE ARGUMENTS - - - - -
		try {
			final String message = "JavaScriptQoCIMRoutingFilterGenerator.addCriterionConstraints(List<QoCMetaData>): the parameter _qoCCriterionConstraints is null";
			ConstraintChecker.notNull(_qoCCriterionConstraints, message);
		} catch (final ConstraintCheckerException _exception) {
			return;
		}
		// - - - - - INITIALIZE THE VARIABLES - - - - -
		QoCMetaData qoCMetaData;
		final Iterator<QoCMetaData> qoCMetaDatasIterator = _qoCCriterionConstraints.iterator();
		// - - - - - CORE OF THE METHOD - - - - -
		stringBufferConstraints.append("if( ");
		while (qoCMetaDatasIterator.hasNext()) {
			qoCMetaData = qoCMetaDatasIterator.next();
			stringBufferConstraints.append("(xpath.evaluate(\"//qocindicator[@id='");
			stringBufferConstraints.append(qoCMetaData.qoCIndicatorId());
			stringBufferConstraints.append("' and qoccriterion[@id='");
			stringBufferConstraints.append(qoCMetaData.qoCCriterionId());
			stringBufferConstraints.append("']/qocmetricdefinition[@id='");
			stringBufferConstraints.append(qoCMetaData.qoCMetricDefinitionId());
			stringBufferConstraints.append("']]\", doc, XPathConstants.NODESET).length == 0)");
			if (qoCMetaDatasIterator.hasNext()) {
				stringBufferConstraints.append(" && ");
			}
		}
		stringBufferConstraints.append(") {return false}");
	}

	/**
	 * This method adds QoC-criterion constraints into a QoCIM-based routing
	 * filters. A QoC-criterion constraint expresses requirements onto the
	 * following attributes:
	 * <ul>
	 * <li>qocim.QoCIndicator.id</li>
	 * <li>qocim.QoCCriterion.id</li>
	 * <li>qocim.QoCMetricDefinition.id</li>
	 * <li>qocim.QoCMetricValue.value</li>
	 * </ul>
	 * The constraints are XPath regular expressions stored into the variable
	 * stringBufferConstraints.
	 *
	 * Example of QoC-criterion constraints produced by the method: <emph> if(
	 * (xpath.evaluate("//qocindicator[@id='10' and
	 * qoccriterion[@id='[10.1][10.2]']/qocmetricdefinition[@id='10.1'] and
	 * qocmetricvalue[@value>='10']]", doc, XPathConstants.NODESET).length == 0)
	 * && (xpath.evaluate("//qocindicator[@id='10' and
	 * qoccriterion[@id='[10.1][10.2]']/qocmetricdefinition[@id='10.2'] and
	 * qocmetricvalue[@value>='100']]", doc, XPathConstants.NODESET).length ==
	 * 0)) { return false; } </emph>
	 *
	 * In this example two constraints have been handled, both require
	 * qocim.QoCIndicator.id = 10 and qocim.QoCCriterion.id = [10.1][10.2]. The
	 * first one also requires qocim.QoCMetricDefinition.id = 10.1 with
	 * qocim.QoCMetricValue.value = 10 and the second one requires
	 * qocim.QoCMetricDefinition.id = 10.2 and qocim.QoCMetricValue.value = 100.
	 *
	 * @param _qoCCriterionConstraints
	 *            The list of QoCMetaData transformed into constraints and added
	 *            into the routing filter. All the constraints are gather within
	 *            one if and separated with the AND logical operator.
	 *            <b>Warning</b>: the if statement generated by the method
	 *            globally acts as an OR operator between all constraints.
	 *            Indeed, the if statement returns false if any QoC metadata
	 *            respects all the constraints.
	 *
	 * @see qocim.QoCIndicator
	 * @see qocim.QoCCriterion
	 * @see qocim.QoCMetricDefinition
	 * @see qocim.QoCMetricValue
	 */
	@Override
	public void addQoCValueConstraints(final Map<QoCMetaData, EComparator> _qocValueConstraints) {
		// - - - - - CHECK THE VALUE OF THE ARGUMENTS - - - - -
		try {
			final String message = "JavaScriptQoCIMRoutingFilterGenerator.addCriterionConstraints(List<QoCMetaData>): the parameter _qoCValueConstraints is null";
			ConstraintChecker.notNull(_qocValueConstraints, message);
		} catch (final ConstraintCheckerException _exception) {
			return;
		}
		// - - - - - INITIALIZE THE VARIABLES - - - - -
		Map.Entry<QoCMetaData, EComparator> constraint;
		final Iterator<Map.Entry<QoCMetaData, EComparator>> constraintIterator = _qocValueConstraints.entrySet()
				.iterator();
		// - - - - - CORE OF THE METHOD - - - - -
		stringBufferConstraints.append("if( ");
		while (constraintIterator.hasNext()) {
			constraint = constraintIterator.next();
			stringBufferConstraints.append("(xpath.evaluate(\"//qocindicator[@id='");
			stringBufferConstraints.append(constraint.getKey().qoCIndicatorId());
			stringBufferConstraints.append("' and qoccriterion[@id='");
			stringBufferConstraints.append(constraint.getKey().qoCCriterionId());
			stringBufferConstraints.append("']/qocmetricdefinition[@id='");
			stringBufferConstraints.append(constraint.getKey().qoCMetricDefinitionId());
			stringBufferConstraints.append("'] and qocmetricvalue[@value");
			stringBufferConstraints.append(getComparaitor(constraint.getValue()));
			stringBufferConstraints.append("'");
			stringBufferConstraints.append(constraint.getKey().qoCMetricValueValue());
			stringBufferConstraints.append("']]\", doc, XPathConstants.NODESET).length == 0)");
			if (constraintIterator.hasNext()) {
				stringBufferConstraints.append(" && ");
			}
		}
		stringBufferConstraints.append(") {return false}");
	}

	@Override
	public String generateFilter() {
		// - - - - - RETURN STATEMENT - - - - -
		return stringBufferConstraints.toString();
	}

	// # # # # # PRIVATE METHODS # # # # #

	private String getComparaitor(final EComparator _comparaitor) {
		// - - - - - INITIALIZE THE VARIABLES - - - - -
		String ret_comparaitor = "";
		// - - - - - CORE OF THE METHOD - - - - -
		switch (_comparaitor) {
		case EQUALS:
			ret_comparaitor = "=";
			break;
		case UPPER_EQUALS:
			ret_comparaitor = ">=";
			break;
		case UPPER:
			ret_comparaitor = ">";
			break;
		case LOWER_EQUALS:
			ret_comparaitor = "<=";
			break;
		case LOWER:
			ret_comparaitor = "<";
			break;
		case DIFFERENT:
			ret_comparaitor = "!=";
			break;
		default:
			ret_comparaitor = "=";
		}
		// - - - - - RETURN STATEMENT - - - - -
		return ret_comparaitor;
	}
}
